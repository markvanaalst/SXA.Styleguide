version: '2.4'

services:
  traefik:
    volumes:
      - ./docker/traefik:C:/etc/traefik
    depends_on:
      hrz:
        condition: service_healthy

  redis:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-redis:${VERSION:-latest}
    build:
      context: ./docker/build/redis
      args:
        BASE_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-redis:${SITECORE_VERSION}

  mssql:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-xm1-mssql:${VERSION:-latest}
    build:
      context: ./docker/build/mssql
      args:
        BASE_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xm1-mssql:${SITECORE_VERSION}
        SPE_IMAGE: ${SITECORE_MODULE_REGISTRY}spe-assets:${SPE_VERSION}
        SXA_IMAGE: ${SITECORE_MODULE_REGISTRY}sxa-xm1-assets:${SXA_VERSION}
        HORIZON_RESOURCES_IMAGE: ${SITECORE_MODULE_REGISTRY}horizon-integration-xm1-assets:${HORIZON_ASSET_VERSION}
    mem_limit: 2GB
    volumes:
      - ${LOCAL_DATA_PATH}\mssql:c:\data

  # Mount our Solr data folder
  solr:
    volumes:
      - ${LOCAL_DATA_PATH}\solr:c:\data

  # Some modules (like SXA) also require additions to the Solr image.
  solr-init:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-xm1-solr-init:${VERSION:-latest}
    build:
      context: ./docker/build/solr-init
      args:
        BASE_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xm1-solr-init:${SITECORE_VERSION}
        SXA_IMAGE: ${SITECORE_MODULE_REGISTRY}sxa-xm1-assets:${SXA_VERSION}

  id:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-id:${VERSION:-latest}
    build:
      context: ./docker/build/id
      args:
        BASE_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-id:${SITECORE_VERSION}
    environment:
      Sitecore_Sitecore__IdentityServer__Clients__DefaultClient__AllowedCorsOrigins__AllowedCorsOriginsGroup2: https://${HRZ_HOST}

  cm:
    image: ${REGISTRY}${COMPOSE_PROJECT_NAME}-xm1-cm:${VERSION:-latest}
    build:
      context: ./docker/build/cm
      args:
        BASE_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xm1-cm:${SITECORE_VERSION}
        SPE_IMAGE: ${SITECORE_MODULE_REGISTRY}spe-assets:${SPE_VERSION}
        SXA_IMAGE: ${SITECORE_MODULE_REGISTRY}sxa-xm1-assets:${SXA_VERSION}
        TOOLING_IMAGE: ${SITECORE_TOOLS_REGISTRY}sitecore-docker-tools-assets:${TOOLS_VERSION}
        HORIZON_RESOURCES_IMAGE: ${SITECORE_MODULE_REGISTRY}horizon-integration-xm1-assets:${HORIZON_ASSET_VERSION}
        MANAGEMENT_SERVICES_IMAGE: ${SITECORE_MODULE_REGISTRY}sitecore-management-services-xm1-assets:${MANAGEMENT_SERVICES_VERSION}
    volumes:
      - ${LOCAL_DEPLOY_PATH}:C:\deploy
      - ${LOCAL_DATA_PATH}\cm:C:\inetpub\wwwroot\App_Data\logs
    environment:
      SITECORE_DEVELOPMENT_PATCHES: CustomErrorsOff
      Sitecore_Horizon_ClientHost: https://${HRZ_HOST}
    entrypoint: powershell -Command "& C:\tools\entrypoints\iis\Development.ps1"
  hrz:
    image: ${SITECORE_MODULE_REGISTRY}sitecore-horizon:${HORIZON_VERSION}
    isolation: ${ISOLATION}
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost/healthz/live']
      timeout: 300s
    environment:
      Sitecore_License: ${SITECORE_LICENSE}
      Sitecore_FederatedUI__HostBaseUrl: http://hrz
      Sitecore_SitecorePlatform__ContentManagementUrl: https://${CM_HOST}
      Sitecore_SitecorePlatform__ContentManagementInternalUrl: http://cm
      Sitecore_Sitecore__Authentication__OpenIdConnectOptions__RequireHttpsMetadata: 'false'
      Sitecore_Sitecore__Authentication__OpenIdConnectOptions__Authority: https://${ID_HOST}
      Sitecore_Sitecore__Authentication__OpenIdConnectOptions__CallbackAuthority: https://${HRZ_HOST}
      Sitecore_Sitecore__Authentication__OpenIdConnectOptions__InternalAuthority: http://id
      Sitecore_Sitecore__Authentication__BearerAuthenticationOptions__Authority: https://${ID_HOST}
      Sitecore_Sitecore__Authentication__BearerAuthenticationOptions__InternalAuthority: http://id
      Sitecore_Sitecore__Authentication__BearerAuthenticationOptions__RequireHttpsMetadata: 'false'
      Sitecore_Plugins__Filters__ExperienceAccelerator: +SXA
    depends_on:
      id:
        condition: service_started
      cm:
        condition: service_started
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.middlewares.force-STS-Header.headers.forceSTSHeader=true'
      - 'traefik.http.middlewares.force-STS-Header.headers.stsSeconds=31536000'
      - 'traefik.http.routers.sh-secure.entrypoints=websecure'
      - 'traefik.http.routers.sh-secure.rule=Host(`${HRZ_HOST}`)'
      - 'traefik.http.routers.sh-secure.tls=true'
      - 'traefik.http.routers.sh-secure.middlewares=force-STS-Header'
      - 'traefik.http.services.sh.loadbalancer.server.port=80'
